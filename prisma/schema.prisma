// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}





model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String     @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String     @map("provider_account_id")
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String  @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String    
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}





model Profile {

  id            String @id @default(auto()) @map("_id") @db.ObjectId
  email         String @unique
  name          String
  imageUrl      String?


  portfolios   Portfolio[]



  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Portfolio {

  id            String @id @default(auto()) @map("_id") @db.ObjectId 
  name          String
  title         String
  bio           String
  imageUrl      String?
  country       String?
  skills        String[] @default([])


  theme         String   @default("basic")

  email         String
  tel           String
  linkedin      String?
  facebook      String?
  instagram     String? 

  published     Boolean @default(false) 

  profileId     String @db.ObjectId
  profile       Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)


  projects      Project[]
  experiences   Experience[]
  languages    Language[]



  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  

}


model Project {
   id            String @id @default(auto()) @map("_id") @db.ObjectId 
   title         String
   description   String?



   portfolioId   String @db.ObjectId
   portfolio    Portfolio @relation(fields: [portfolioId],references: [id],onDelete: Cascade)

   images    Image[]

   createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Experience{
  id            String @id @default(auto()) @map("_id") @db.ObjectId 
   place         String
   title         String?
   description   String?
   achievments   String[] @default([])
   startDate    DateTime?
   endDate      DateTime?

   portfolioId   String @db.ObjectId
   portfolio    Portfolio @relation(fields: [portfolioId],references: [id],onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}





model Image {
  id            String @id @default(auto()) @map("_id") @db.ObjectId 

  projectId     String @db.ObjectId
  project       Project @relation(fields: [projectId],references: [id], onDelete: Cascade)

  url           String

    createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

enum Experties {

  BEGINNER
  INTERMEDIATE
  FLUENT
  NATIVE
}


model Language {
  id            String @id @default(auto()) @map("_id") @db.ObjectId 


  language    String
  level       Experties @default(BEGINNER)



   portfolioId   String @db.ObjectId
   portfolio    Portfolio @relation(fields: [portfolioId],references: [id],onDelete: Cascade)

 createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

